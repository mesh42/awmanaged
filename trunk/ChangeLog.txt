Release 0.5.16 (unstable) feature/maintenance release
* Adding ConsoleMessage method to IChatCommands
* Adding Color Chat Bot to the standard bot plugin library.
* Adding some missing dependency libraries, for db4o.

Release 0.5.15 (unstable) feature/maintenance release
* Adding deployment configuration files for Inno setup 5.
* Adding simple command line configuration for Universe Connection in the Server Console.
* [Bug-Fix], plugin discovery does not always find the correct directory path.
* Adding a friendly message to the server console, if a connection can not be made with the current Universe Connection configuration.

Release 0.5.14 (unstable) feature/maintenance release
* Unifying build targets to x86.
* Adding A simple RWX analyzer, i needed for my RWX Megapath web site.
* Adding Vector2 to math, primarliy used for UV coordinates on the simple RWX analyzer.
* Adding Polygon to math, also used primarily by the simple RWX analyzer.
* Adding a commmand line tool, that dumps the RWX statistics under /Tools solution folder.

Release 0.5.13 (unstable) major maintenance release
* Upgraded to Visual Studio 2010
* Adding Diagram photoshop artwork for the codeplex wiki.
* Adding time indication to the afkbot, next to date indication.
* Setting Thread Culture to US/en.
* Adding the /persist flag to load/unload plugin command, for persisting plugin loading/umloading at next startup.
* Adding factory Pattern to support multiple console types i.e. Remote Console (console and winform)
* Cleaning up code.
* Adding Service project so awmanaged can be tested to run as a Local System windows service.
* Abstracting services and services managers.
* Upgrading db4o 7.2 to db4o 7.12
* Adding test code for a generic form generator for the web server services.
* Encapsulating web server with BaseService so it can be maintained by the service managers.
* Fixing minor bug in the Quote bot plugin (duplicate quotes).
* Renaming BotEngineExample to ServerConsole in the AwManaged.Tests
* Adding tree system for the IDE reflecting on IIdentifiable
* Adding design time information to objects.

Release 0.4.12 (unstable feature/maintenance release
* Adding Afk Bot Sample plugin
* Adding Quote Bot Sample plugin
* Adding Scheduling services to the core
* Cleaning up code
* Refactoring, abstracting interface implementations.
* Adding Application Web Server services.

Release 0.4.11 (unstable) feature/maintenance release
* [Bug] Scene node models was not updated when a remote user adds a model to the world.
* Adding a prompt to the bot engine console.
* Adding a simple command interpreter to the bot engine console for manual commanding.
* Generalizing the ActionInterpreter Service to the Core GenericInterpreter Service using Type parameters.
* Adding ICommandExecute and ICommandExecutionResult for interpreted commands which can be executed.
* Adding INeedBotInstance interface for custom interpreted commands, which need an instance of the bot engine to operate.
* Adding "well known type" IEnumerable<IActionTrigger? for custom interpreted command which need to know about the commanding context.
* Creating a bot plugin architecture whcih can be loaded through reflection
* Adding a plugin project.
* Changing som prebuild commands to post build, only when project output updates and putting the file paths between quotes
* Putting the first GenericIntepreter commands in the Server Console for testing.
* Adding a chat console to the server console.

Release 0.3.10 (unstable) maintenance/feature release
* Testing bot object add/remove commands.
* Introducing pending transactions for preventing Universe server disconnects on massive object updates.
* Exluding Data field from Model, Data is only used in V4 objects.
* setting Object Hash in the OBJECT CALLBACK REFERENCE for preperation of Atomic ObjectV3 Transactions.
* Adding Several compiler defines, for including, or excluding test in the bot engine example. Please enable these at your convinience, they are liste below
* DEFINE OBJECT_ADD : if you want the bot example to add objects to your world (it will clean them upon the next run, see documentation)
* DEFINE BACKUP : if you want to bot engine example to test the backup faccility
* DEFINE ACTION_INTERPRETER : if you want the bot engine example to interpret all action string in the world.
* Adding EventTransactionCompleted for determining if multiple object changes/add/removes have finished.
* Adding object hashing to the botengine, which identifies the bot add/removed or changed an object using the OBJECT CALLBACK REFERENCE, this is to prevent cyclic callbacks.

Release 0.3.9 (unstable) optimizing release
* Working some more on the action string interpreter
* Removing old and new number from the model properties, they are not used in the managed environment.
* Optimizing object change/add/remote speed.
* Adding some color and tests to the console.

Release 0.3.8 (unstable) maintenance release
* Adding reflection tools and unit tests for IActionCommand and IActionTrigger
* Adding command item attributes, which indicate how to bind to action string command elements.
* Adding a reflection cache for quick reflection on primarily the action string interpreter.
* Adding Action reflection attributes for property, enum and enum type binding.
* [Bug] ServicesManager did not start up services in the BotEngine.

Release 0.3.7 (unstable) maintenance release
* Generalizing Storage and Remoting Client/Server Services into Core.Interfaces.IConnectedServiceDevice.cs
* Adding a service manager.
* Solution wide Cleaning up of code and commenting for future technical documentation
* Make code more compliant to core interface designs.
* Adding client delegate/events wrapper for callbacks over .NET remoting.
* Splitting up IIdentityManagementClient into IdentityManagementObjects who's implementation doesn't need to know about the storage connection interface.
* Introducing service manager to BotEngine.
* Adding a timeout on Instance(_universeConnection.Connection.Domain, _universeConnection.Connection.Port) appearantly Instance waits indefinatly on byteMr's implementation.
* Workng on some unit tests for the action interpreter.
* Adding the Action Commands to a type cache in the unit tests, for quick intrepetration.

Release 0.3.6 (unstable) maintenance release
* Adding Signing to assemblies,awmanaged can now be registered in the GAC.
* Adding user database for remote bot engine users.
* Adding user groups for remote bot engine users.
* Adding user authorization for remote bot engine users.
* Adding some nice design pattern interface restriction on groups and users through IHaveAuthorization.
* Adding remoting server provider with Icp, Tcp and Http support
* Adding Particle Object V4 support.
* Adding some Action Command Set classes for preparation in intepreting action object strings.
* Adding some query example on action strings in the Bot Engin Example.
* Introducing e.SceneNodes als event argument.
* Splitting up Events into templated, local and remote event args.
* Reintroducing non templated event types into botengine for keeping syntax unified between remotingbots and localbots.

Release 0.3.5 (unstable) maintenance & feature release
* Adding backup provider support classes
* Changed struct ModelClickedStatistics to class, object reference problem in db4o storage.
* Adding thread safe context to StorageClient provider.
* Adding cloneable context to StorageClient provider for long running db processes.
* Further restricting access to property members which implement interface ISceneNode.
* Adding some support classes for the world backup provider.
* Adding V4 object support (premature not tested).
* Renaming AwManaged.SceneNodes name space to AwManaged.Scene (conflict name resolution in SceneNodes Class).
* Demonstrating some backup storage faccility in the Bot Example.
* Adding some core design pattern ideas for future development amongst: Differential and DependendObject.
* Adding constraints on type parameters in interfaces, MarshalByRefObject for remoting services..
* type parameters templating on event handlers.
* Seperating events in interface groups by their category.
* Adding License notifcation to all projects, they are copied to the bin output directory.

Release 0.2.4 (unstable) maintenance & feature release
* Minor Refactoring
* Adding Premature Storage Client Provider (Db4o)
* Adding Storage Server Provider (Db4o)
* Updating BotEngine Example to unit test Storage Provider (Object Click Statistics)
* Adding App Settings configuration option for Bot Universe Connection Strings and Storage Client/Server Connection strings.
  Please read the instructions on codeplex on how to configure your app settings.

Release 0.1.3 (unstable) maintencance release.
* A lot of refactoring in the code.
* Templating interfaces and adding type parameter restrictions for implementations.
* Modifying bot example to perform in world unit tests.
* Adding cloneable cache and scenenodes.
* Adding unified object change, add and removes.
* Securing the Scenenode Cache against pollution from custom scripts.
* Adding some comments to code for future API documentation

Release 0.1.2 (unstable) maintenance release.
* Adding changelog text file
* Adding Shared Assembly Info
* Internalizing several unmanaged methods
* Protecting Cache objects which use List<T>, using security exceptions.
* Auto Sensing Enter Global, or non Global (CareTaker capability) and adjusting object query type.
* Extending delayed Say command with attributes.
* Adding premature IDE for script testing.
* Adding X86 build target
* Encapsulating AW unmanaged SDK methods with try catch blocks to propagate Managed Exceptions.
